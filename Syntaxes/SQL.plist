{
	name = "SQL";
	scopeName = "source.sql";
	uuid = "C49120AC-6ECC-11D9-ACC8-000D93589AF6";
	fileTypes = ( sql, ddl, dml );

	foldingStartMarker = "\\s*\\(\\s*$";
	foldingStopMarker = "^\\s*\\)";
	increaseIndentPattern = "^\\s*(create|grant|insert|delete|update)\\s*";
 	smartTypingPairs = (
    	( "(", ")" ), ( "[", "]" ), ( "{", "}" ), ( "\"", "\"" ), ( "'", "'" )
	);
	highlightPairs = (
		( "(", ")" ), ( "[", "]" ), ( "{", "}" )
	);

	patterns = (
		{   name = "keyword.sql.DDL.create";
			match = "(?i:^\\s*create\\s+(table|(unique\\s+)?index|view)\\s+)";
		},

		{   name = "keyword.sql.DDL.create.II";
			match = "(?i:\\s+(on\\s+|(not\\s+)?null)\\s*)";
		},

		{   name = "keyword.sql.DDL.drop";
			match = "(?i:^\\s*drop\\s+(table|index|view))";
		},

		{   name = "keyword.sql.DDL.drop.II";
			match = "(?i:\\s*(drop\\s+table)\\s+\\w+(\\s+cascade)?\\s*)";
		},
		
		{   name = "keyword.sql.DDL.alter";
			match = "(?i:^\\s*alter\\s+(table|index|view)\\s+)";
		},

		{   name = "keyword.sql.DML";
			match = "(?i:^\\s*([\\(]{0,}select(\\s+distinct)?|insert\\s+into|update|delete|from|where|group\\sby|and|union(\\s+all)?|having|order\\sby)\\b)";
		},

		{   name = "keyword.sql.DML.II";
			match = "(?i:\\s+values\\s+)";
		},

		{   name = "keyword.sql.LUW";
			match = "(?i:(begin(\\s+work)?|commit(\\s+work)?|rollback(\\s+work)?))";
		},

		{   name = "keyword.authorization.sql";
			match = "(?i:(grant(\\swith\\sgrant\\soption)?|revoke))"; },

		{   name = "keyword.storage.sql";
			match = "(?i:^\\s*([A-Za-z0-9'_])+\\s+(bigint|bigserial|bit|bit\\svarying\\(\\d+\\)|boolean|box|bytea|character\\s(varying)?\\(\\d+\\)|char\\(\\d+\\)|var\\schar\\(\\d+\\)|cidr|circle|date|double\\sprecision|inet|int|integer|interval\\(\\d+\\)|line|lseg|macaddr|money|numeric(\\(\\d+,\\d+\\))?|oid|path|point|polygon|real|smallint|serial|text|time\s(\\(\\d+\\))(\\swithout\stime\szone)?|timestamp(\s(\\(\\d+\\))(\\swithout\stime\szone)?)?|varchar(\\(\\d+\\))?)\\s*)";
        },

		{   name = "keyword.data-integrity.sql";
		    match = "(?i:\\<(primary\\s+key|references|on\\sdelete(\\s+cascade)?|check)\\>)";
		},

		{   name = "keyword.data-integrity.sql.II";
		    match = "(?i:\\<in\\>)";
		},
	
		{   name = "string.single-quoted.sql";
		    begin = "'";
		    end = "'";
		    swallow = "\\\\.";
		},

		{   name = "keyword.object-comments.sql";
		    match = "(?i:^\\s*(comment\\s+on\\s+(table|column|aggregate|constraint|database|domain|function|index|operator|rule|schema|sequence|trigger|type|view))\\s+.*?\\s+(is)\\s+)";
		},

		{   name = "comment.line.sql";
		    match = "--.*$";
		},

 		{   name = "string.double-quoted.sql";
 		    begin = "\"";
 		    end = "\"";
			patterns = (
        		{ name = "string.interpolation.sql"; match = "#\\{([^\\}]*)\\}"; }
			);
		},
		{   name = "string.double-quoted.sql";
		    begin = "%\\{";
		    end = "\\}";
			patterns = (
				{ name = "string.interpolation.sql"; match = "#\\{([^\\}]*)\\}"; }
			);
		},
		{   name = "string.regexp.sql";
		    begin = "/(?=\\S.*/)";
		    end = "/";
			patterns = (
				{ name = "string.interpolation.sql"; match = "#\\{([^\\}]*)\\}"; },
				{ name = "string.escaped-slash.sql"; match = "\\\\/"; }
			);
		},
		{   name = "string.regexp.modr.sql";
		    begin = "%r\\{";
		    end = "\\}";
			patterns = (
				{ name = "string.interpolation.sql"; match = "#\\{([^\\}]*)\\}"; },
				{ name = "string.escaped-slash.sql"; match = "\\\\/"; }
			);
		},
	);
}
